generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ServiceType {
  HAIRCUT
  COLORING
  STYLING
  FACIAL
  MANICURE
  PEDICURE
  MASSAGE
  OTHER
}

enum AppointmentStatus {
  SCHEDULED
  CONFIRMED
  CANCELLED
  COMPLETED
}

model Shop {
  id        Int       @id @default(autoincrement())
  name      String    @db.VarChar(100)
  address   String?
  phone     String?   @db.VarChar(20)
  email     String?   @db.VarChar(100)
  staff     Staff[]
  services  Service[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Staff {
  id            Int                @id @default(autoincrement())
  shop          Shop               @relation(fields: [shopId], references: [id])
  shopId        Int
  firstName     String             @db.VarChar(50)
  lastName      String             @db.VarChar(50)
  email         String?            @unique @db.VarChar(100)
  phone         String?            @db.VarChar(20)
  role          String?            @db.VarChar(50)
  appointments  Appointment[]
  availability  StaffAvailability[]
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
}

model Client {
  id           Int           @id @default(autoincrement())
  firstName    String        @db.VarChar(50)
  lastName     String        @db.VarChar(50)
  email        String?       @unique @db.VarChar(100)
  phone        String?       @db.VarChar(20)
  preferences  String?
  appointments Appointment[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Service {
  id           Int           @id @default(autoincrement())
  shop         Shop          @relation(fields: [shopId], references: [id])
  shopId       Int
  name         String        @db.VarChar(100)
  description  String?
  duration     Int
  price        Decimal       @db.Decimal(10, 2)
  serviceType  ServiceType
  appointments Appointment[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Appointment {
  id        Int               @id @default(autoincrement())
  client    Client            @relation(fields: [clientId], references: [id])
  clientId  Int
  staff     Staff             @relation(fields: [staffId], references: [id])
  staffId   Int
  service   Service           @relation(fields: [serviceId], references: [id])
  serviceId Int
  startTime DateTime
  endTime   DateTime
  status    AppointmentStatus @default(SCHEDULED)
  notes     String?
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
}

model StaffAvailability {
  id         Int      @id @default(autoincrement())
  staff      Staff    @relation(fields: [staffId], references: [id])
  staffId    Int
  dayOfWeek  Int
  startTime  DateTime @db.Time()
  endTime    DateTime @db.Time()
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}